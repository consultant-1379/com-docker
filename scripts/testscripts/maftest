#!/usr/bin/env python


from cirpa.utils.shellhelper import execute, call
from cirpa.utils.git import Git
from comlib.commetafile import ComMetaFile

import os
import argparse
import tarfile
import urllib2
import base64
import shutil
import time

parser = argparse.ArgumentParser(description='MAF Test options')

mandatoryArgs = parser.add_argument_group('Mandatory arguments')
mandatoryArgs.add_argument('--commit', action="store", dest="commit", default="master")
mandatoryArgs.add_argument('--repo', action="store", dest="repo", default="maf-main")
mandatoryArgs.add_argument('--build-type', action="store", dest="buildType",  choices=['build', 'unittest', 'functiontest'], required=True)
mandatoryArgs.add_argument('--mirror-path', action="store", dest="mirrorPath", required=True, help="The path to where all the mirrored repositories are located")

# optional
parser.add_argument('--maf-version', action="store", dest="mafversion", default="1.0.0-1")
parser.add_argument('--local-src', action="store", dest="localSrc")
parser.add_argument("--valgrind", action="store", dest="valgrind", default="off")

args = parser.parse_args()


class MafTest(object):

    def __init__(self, args):
        workDir = os.getcwd()
        if args.localSrc:
            print "**************** building from local repo **************"
            srcDir = "/"
            repoDir = args.localSrc
        else:
            srcDir = os.path.join(workDir, "src")
            repoDir = os.path.join(srcDir, "maf-main")
            buildDir = os.path.join(repoDir, "build")

        self.buildtype = args.buildType
        self._repoDir = repoDir
        self._srcDir = srcDir
        self._buildDir = buildDir
        self._args = args

    # this function should not be overriden, please override _build and _clone function instead
    def build(self):

        os.chdir("/")
        artifactory_prebuilt_url="https://arm.rnd.ki.sw.ericsson.se/artifactory/proj-com-ci-local/pre-built/pre-built.tar.gz"
        downloaded_file=self.download_file(artifactory_prebuilt_url)

        #Extract the downloaded tar.gz file
        tar = tarfile.open(downloaded_file, "r:gz")
        tar.extractall()
        tar.close()

        #Set LD_LIBRARY_PATH
        if self.buildtype != "build":
           _binDir = os.path.join(self._repoDir, "bin")
           os.environ["LD_LIBRARY_PATH"] =  _binDir + ":/pre-built/x86_64/poco/1.4.5/usr/lib64"

        # add $USER environmental variable to the system
        os.environ["USER"] = "root"

        # add $MAF_TRUNK environmental variable to the system
        os.environ["MAF_TRUNK"] = self._repoDir

        self._clone()
        return self._build()

    def _clone(self):
        if os.path.isdir(self._srcDir):
            shutil.rmtree(self._srcDir)

        git = Git()
        if not self._args.localSrc:
            # not a local build, clone the repo
            execute(["mkdir", "-p", self._srcDir])

            os.chdir(self._srcDir)

            git.clone(self._args.commit, self._args.repo, self._args.mirrorPath, self._srcDir)

        # always create the build meta file
        commitHash = git.getCommitHash(self._repoDir)
        repoUrl = git.getRepoUrl(self._repoDir)
        filepath = os.path.join(self._buildDir, "dist")

        self._createMetaFile(filepath, repoUrl, commitHash)

    def _createMetaFile(self, metaLocation, repoUrl, commitHash):
        filename = "maf.meta.info"

        print execute(["mkdir", "-p", metaLocation])

        meta = ComMetaFile()

        if os.path.isfile("/" + filename):
            meta.load("/" + filename)

        meta.addBuildInfo(repoUrl, commitHash)

        meta.write(os.path.join(metaLocation, filename))

    def _build(self):

        os.chdir(self._buildDir)

        print (self._repoDir)

        # TODO : Remove COM_DEPS_DIR flag once this solution is productized
        command = ["cmake", "-DCOM_DEPS_DIR=/", "-DOPTION_USE_ASTYLE=off", "."]
        returnValue = call(command,debug=True)
        if returnValue > 0:
              return returnValue


        if self.buildtype == "build":
            command = ["make", "all"]

        elif self.buildtype == "unittest":
           if args.valgrind == "on":
               command = ["make", "valgrind_unittest"]
           else:
               command = ["make", "unittest"]

        elif self.buildtype == "functiontest":
           command = ["make", "all"]

           returnValue = call(command,debug=True)
           if returnValue > 0:
               return returnValue

           if args.valgrind == "on":
               command = ["make", "valgrind_ft"]
           else:
               command = ["make", "run-ft"]

        returnValue = call(command,debug=True)
        if returnValue > 0:
            return returnValue

        counter = 5
        while ('gen_report.py' in execute(['ps','-eaf'],debug=False)) and counter > 0:
            time.sleep(1)
            counter -= 1

        return 0

    def download_file(self,url):
        file_name = url.split('/')[-1]
        USER = os.getenv('ADMIN_USER')
        PASSWORD = os.getenv('ADMIN_PASSWORD')
        print ("Downloading the file: " + file_name)
        request = urllib2.Request(url)
        b64auth = base64.standard_b64encode("%s:%s" % (USER,PASSWORD))
        request.add_header("Authorization", "Basic %s" % b64auth)
        ulib = urllib2.urlopen(request)
	file_obj = open(file_name, 'wb')

        file_size_dl = 0
        block_sz = 8192
        while True:
            buffer = ulib.read(block_sz)
            if not buffer:
                break

            file_size_dl += len(buffer)
            file_obj.write(buffer)

        file_obj.close()
        return file_name

if __name__ == "__main__":
    exit(MafTest(args).build())
